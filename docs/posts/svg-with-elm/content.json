{"body":"\nこの記事では、\n\n- SVG の基本的な書き方\n- Elm での記述方法\n- 利用できるパッケージ\n\nについて見ていきます。\n\n# SVG ってなんだろう？\n\nScalable Vector Graphics の頭文字をとって、SVG と呼ばれています。\n解像度に制限されないベクター画像のための XML 文法として利用されています。\n\n## 仕様について\n\nSVG の仕様は W3C によって開発・勧告されています。\nドキュメントが充実しているので、積極的に活用しましょう。\n\n[Scalable Vector Graphics (SVG) 1.1 (Second Edition) | www.w3.org](https://www.w3.org/TR/SVG11/)\n\ntriple_underscore さんによる日本語訳を参考にするのも良いと思います。\n\n[SVG 1.1 仕様 （第２版） 日本語訳 | triple-underscore.github.io](https://triple-underscore.github.io/SVG11/)\n\n## SVG で何ができるのか？\n\n画像の形式は .jpg, .png, .gif など数多くありますが、\n\n- 解像度に制限されない\n- ベクターである\n- XML で記述できる\n\nといった他にはない特徴を持つことが、SVG の強みです。\nHTML 同様のスタイル指定や、アニメーションができるのも魅力ですね。\n\nアイコンやロゴイメージへの活用はもちろん、インタラクティブなコンテンツの作成、データの可視化（ビジュアライゼーション）やジェネラティブ・アートなどがブラウザ上で簡単に実現できてしまいます。\n\nすでに必須技術の 1 つと化した SVG ですが、これからも新しい使い方が発見されることでしょう。\n\n## 基本的な書き方\n\nSVG を構成しているのは要素と属性です。\nそのため、HTML と同じ感覚で記述することができます。\n\nSVG として記述されたコードは…\n\n```SVG\n<svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\">\n    <rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" rx=\"15\" ry=\"15\" fill=\"red\" />\n    <circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"blue\" />\n</svg>\n```\n\nブラウザによって画像としてレンダリングされます。\n\n<svg width=\"120\" height=\"120\" viewBox=\"0 0 120 120\">\n<rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" rx=\"15\" ry=\"15\" fill=\"red\" />\n<circle cx=\"50\" cy=\"50\" r=\"50\" fill=\"blue\" />\n</svg>\n\ny 軸が下向きなので少しだけ違和感があるかもしれませんが、HTML の読み書きができれば SVG も問題なく扱えるはずです。\n\n# Elm で SVG を記述しよう\n\n同じことを Elm でもやってみましょう。\nEllie に同じサンプルコードを用意しました。\n\n[elm/svg sample | Ellie](https://ellie-app.com/5x8N5hXk3RFa1)\n\n```Elm\nimport Svg exposing (Svg, svg, rect, circle)\nimport Svg.Attributes exposing (width, height, viewBox, x, y, rx, ry, cx, cy, r, fill)\n\nmain : Svg msg\nmain =\n    svg\n        [ width \"120\"\n        , height \"120\"\n        , viewBox \"0 0 120 120\"\n        ]\n        [ rect\n                [ x \"10\"\n                , y \"10\"\n                , width \"100\"\n                , height \"100\"\n                , rx \"15\"\n                , ry \"15\"\n                , fill \"red\"\n                ]\n                []\n        , circle\n                [ cx \"50\"\n                , cy \"50\"\n                , r \"50\"\n                , fill \"blue\"\n                ]\n                []\n        ]\n```\n\n記法の都合でコードが縦長になりましたが、元の SVG と対応しているのがよく分かります。\nもう少し丁寧に解説をしてみます。\n\n## モジュールのインポート\n\n```Elm\nimport Svg exposing (Svg, svg, rect, circle)\nimport Svg.Attributes exposing (width, height, viewBox, x, y, rx, ry, cx, cy, r, fill)\n```\n\nコードの先頭で、2 つのモジュール Svg と Svg.Attributes をインポートしました。\nこれらは Elm が公式に提供しているパッケージ elm/svg に含まれています。\n\n[svg 1.0.1 | Elm Packages](https://package.elm-lang.org/packages/elm/svg/latest/)\n\nこの記事のサンプルコードは、リンク先のサンプルコードをより分かりやすくなるように書き直したものです。\n\n## main 関数の初期化\n\nSvg の関数は Html と同様に扱うことができます。\n\n```Elm\nmain : Svg msg\nmain =\n    svg\n        [ width \"120\"\n        , height \"120\"\n        , viewBox \"0 0 120 120\"\n        ]\n        []\n```\n\nsvg の第一引数には width, height, viewBox を指定しました。\n\n| 属性    | 説明                               |\n| ------- | ---------------------------------- |\n| width   | 画像の \"幅 (px)\"                   |\n| height  | 画像の \"高さ (px)\"                 |\n| viewBox | 描画領域の \"x 座標 y 座標 幅 高さ\" |\n\nviewBox は見慣れない属性かもしれません。\nこの領域内に作成された図形が画面にレンダリングされます。\n\n慣れるまでは、サンプルのように \"0 0 (width に指定した値) (height に指定した値)\" という指定が無難でしょう。\n必要に応じて SVG の仕様や解説記事を検索してください。\n\n[SVG 文書片を定義する： svg 要素 | 文書構造 – SVG 1.1 （第２版）](https://triple-underscore.github.io/SVG11/struct.html#NewDocument)\n\n## 四角形（矩形）を描く：rect\n\n矩形は「くけい」と読みます。\nこれを知っていると、次は「矩計（かなばかり）図」が読めなくなります。\n\n```Elm\nrect\n    [ x \"10\"\n    , y \"10\"\n    , width \"100\"\n    , height \"100\"\n    , rx \"15\"\n    , ry \"15\"\n    , fill \"red\"\n    ]\n    []\n```\n\n| 属性   | 説明                     |\n| ------ | ------------------------ |\n| x      | \"x 座標 (px)\"            |\n| y      | \"y 座標 (px)\"            |\n| width  | \"幅 (px)\"                |\n| height | \"高さ (px)\"              |\n| rx     | \"角丸の x 軸半径　(px)\"  |\n| ry     | \"角丸の y 軸半径　(px)\"  |\n| fill   | 塗りつぶし色の指定（色） |\n\n[rect 要素 | 基本図形 – SVG 1.1 （第２版）](https://triple-underscore.github.io/SVG11/shapes.html#RectElement)\n\n## 円を描く：circle\n\n```Elm\ncircle\n    [ cx \"50\"\n    , cy \"50\"\n    , r \"50\"\n    , fill \"blue\"\n    ]\n    []\n```\n\n| 属性 | 説明                     |\n| ---- | ------------------------ |\n| cx   | \"中心の x 座標 (px)\"     |\n| cy   | \"中心の y 座標 (px)\"     |\n| r    | \"円の半径　(px)\"         |\n| fill | 塗りつぶし色の指定（色） |\n\n楕円にしたいときは ellipse を使います。\n\n[circle 要素 | 基本図形 – SVG 1.1 （第２版）](https://triple-underscore.github.io/SVG11/shapes.html#CircleElement)\n\n## そのほかの図形\n\nパス・基本図形・テキストなどの要素と、様々なアトリビュートを組み合わせて、表現豊かな SVG を作成することができます。\n\n[パス – SVG 1.1 （第２版） | https://triple-underscore.github.io](https://triple-underscore.github.io/SVG11/paths.html)\n\n[基本図形 – SVG 1.1 （第２版） | https://triple-underscore.github.io](https://triple-underscore.github.io/SVG11/shapes.html)\n\n[テキスト – SVG 1.1 （第２版） | https://triple-underscore.github.io](https://triple-underscore.github.io/SVG11/text.html)\n\n# 利用できる Elm のパッケージ\n\nElm Packages で使えそうなパッケージを探してみましょう。\n\n[Elm Packages | https://package.elm-lang.org](https://package.elm-lang.org/)\n\n## SVG の基本となるパッケージ\n\nElm では、SVG を扱うために 2 種類のパッケージが用意されています。\n\n| パッケージ              | 説明                             |\n| ----------------------- | -------------------------------- |\n| elm/svg                 | Elm 公式の SVG パッケージ        |\n| elm-community/typed-svg | 属性の型情報を付加したパッケージ |\n\nどちらも SVG 用の基本的なモジュールを含み、互換性のあるパッケージです。\n好みに応じて使い分けると良いでしょう。\nデータの可視化など、より複雑な SVG を扱う際には elm-community/typed-svg の使用をお薦めします。\n\n## SVG の表現力を高めるパッケージ\n\nより複雑な SVG を作成するためのパッケージも用意されています。\nデータの可視化（ビジュアライゼーション）や、ジェネラティブ・アートに挑戦してみるのも良いですね！\n\n| パッケージ                  | 説明                                                        |\n| --------------------------- | ----------------------------------------------------------- |\n| gampleman/elm-visualization | D3.js に由来するデータ可視化用のライブラリ                  |\n| terezka/line-charts         | グラフ / チャート用のパッケージ                             |\n| gicentre/elm-vega           | Port を介して JavaScript の Vega を利用するためのパッケージ |\n\nまた、path を記述するためのパッケージは複数存在するようです。\n\n| パッケージ                          | 説明                                                            |\n| ----------------------------------- | --------------------------------------------------------------- |\n| Spaxe/svg-pathd                     | d 属性を、M, L, Z などオリジナルの SVG と同様の記法で記述できる |\n| folkertdev/svg-path-lowlevel        | d 属性を、SVG の記法よりも読みやすく宣言的に記述できる          |\n| folkertdev/one-true-path-experiment | 配列から path を生成するためのパッケージ                        |\n\n## 注意：廃止されたパッケージ\n\n以下のパッケージは elm/svg よりも前に使用されていたもので、現在は廃止されています。\nブラウザの検索結果に出ることがあるので注意してください。\n\n| パッケージ     | 説明 |\n| -------------- | ---- |\n| evancz/elm-svg | 廃止 |\n| elm-lang/svg   | 廃止 |\n\n# SVG は難しくない！\n\nでしょ？\n","staticData":{}}