{"body":"\n自作の Elm 開発用テンプレート「 [elm-starfighter](https://github.com/y047aka/elm-starfighter) 」が形になってきたので、その説明を書きます。\n\n# elm-starfighter とは？\n\n関数型言語 [Elm](https://elm-lang.org) を使った Web アプリケーション開発用のテンプレートです。webpack や Parcel といったモジュールバンドラーを使用せず、`npm scripts` で完結しています。Elm での開発に最低限必要なものをシンプルに使えるのが、elm-starfighter の特徴です。\n\n- [elm-starfighter](https://github.com/y047aka/elm-starfighter)\n\n## なぜ作ろうと思ったのか？\n\nJavaScript での開発と同様に、Elm においても webpack や Parcel を使った開発方法が普及しています。しかし、Elm はモジュールバンドラーを必要とはしていないかもしれません。それならばモジュールバンドラーに頼らない、よりシンプルな開発ができるのではないかと考えました。\n\n既に知られている [create-elm-app](https://github.com/halfzebra/create-elm-app) や [elm-webpack-starter](https://github.com/elm-community/elm-webpack-starter) に対して「毎回使うには大きすぎる」と感じたことも動機の 1 つです。Elm 入門者が簡単に使える開発ツールがあれば、Elm の持つ魅力をもっと引き出せるのではないかと思います。\n\n## 開発の方針\n\n### Elm 入門者に優しく\n\n公式ガイドや『基礎からわかる Elm』を読んだあとで、すぐに使ってもらえるよう意識して作りました。使い方に迷うようなところがあれば改善していきたい。\n\n### Elm の持つ魅力を引き出す\n\nJavaScript と Elm では何が違うのかを意識しながら作りました。標準の `elm make` コマンドはデバッグ機能を使うことができますし、そこに開発用サーバー機能を付加した `elm-live` も非常に強力です。それらの良さを残しつつ、苦手な部分を補うようにしました。\n\n### モジュールバンドラーと戦わない\n\n適材適所を意識すること。例えば、Port を積極的に使うならモジュールバンドラーの方が有利のはず。\n（私は Port をほとんど使わないので、推測で言っています）\n\n## 謝辞\n\n@ababup1192 さんには、開発初期の段階で多くの相談に乗っていただきました。ありがとうございました。\n\n# 簡単に使えるので書くことがない\n\nいちばん簡単な試し方は以下のコマンドを実行する方法です。\n\n```\n$ git clone https://github.com/y047aka/elm-starfighter.git\n$ cd elm-startfighter\n$ npm install\n$ npm start\n```\n\nまた、リポジトリのトップから緑色のボタン「Use this template」を選択すると、elm-starfighter を使った新しいリポジトリを作る事もできます。\n![](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/406109/3faa5b0f-8ff3-9280-fa09-6ba62e3495e8.png)\n\n## npm start\n\n`npm start` を実行すると、\n\n1.  `docs` にファイルが生成され\n2.  開発用サーバーが起動し\n3.  ブラウザに最初のページが表示されます\n\n## npm run build\n\nもう 1 つのコマンドは `npm run build` で起動します。\n\n1.  `public` にファイルが生成されます\n\n生成前のファイルはすべて `src` にあるので、いつも通りに開発を進められます。\n\n```\nsrc\n - index.html\n - main.js\n - Main.elm\n - style.sass または style.sass\n - assets（画像など）\n```\n\n## ディレクトリ名について\n\n`docs` は Github Pages を、`public` は Netlify をすぐに使えるよう意図して設定しています。\n\n# おわり\n\nこの記事の本編は、ここで終了です。\nカスタマイズして使う場合には以下の付録を参考にしてください。\n\n# 付録 1： package.json を読む\n\nここに elm-starfighter のすべてがあります。webpack や Parcel の姿はなく、代わりに `npm scripts` が並んでいます。`elm make` コマンドや `elm-live` を使っていることが分かりますね。これから `scripts` を詳しく見ていきましょう。\n\n```package.json\n{\n  \"scripts\": {\n    \"clean\": \"rimraf docs public\",\n    \"watch:html\": \"cpx -w src/index.html docs\",\n    \"watch:assets\": \"cpx -w \\\"src/assets/**/*\\\" docs/assets\",\n    \"watch:js\": \"cpx -w src/main.js docs\",\n    \"watch:elm\": \"elm-live src/Main.elm --open --start-page=index.html --dir=docs -- --output=docs/elm.js\",\n    \"watch:sass\": \"sass --watch src:docs\",\n    \"watch\": \"sass src:docs && npm-run-all -p watch:*\",\n    \"compile:html\": \"cpx src/index.html public\",\n    \"compile:assets\": \"cpx \\\"src/assets/**/*\\\" public/assets\",\n    \"compile:js\": \"cpx src/main.js public\",\n    \"compile:elm\": \"elm make src/Main.elm --optimize --output=public/elm.optimized.js\",\n    \"compile:sass\": \"sass --style=compressed --no-source-map src:public\",\n    \"compile\": \"npm-run-all -p compile:*\",\n    \"minify:elm\": \"google-closure-compiler --js=public/elm.optimized.js --js_output_file=public/elm.js && rimraf public/elm.optimized.js\",\n    \"build\": \"npm-run-all -s clean compile minify:elm\",\n    \"start\": \"npm-run-all -s clean watch\",\n    \"test\": \"elm-test\"\n  },\n  \"devDependencies\": {\n    \"cpx\": \"^1.5.0\",\n    \"elm\": \"0.19.0-bugfix6\",\n    \"elm-live\": \"3.4.0\",\n    \"elm-test\": \"^0.19.0-rev6\",\n    \"google-closure-compiler\": \"^20190819.0.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"rimraf\": \"^3.0.0\",\n    \"sass\": \"^1.22.10\"\n  }\n}\n```\n\n## npm scripts\n\n以下の 4 種類のコマンドを `start` と `build` から実行しています。\n\n- clean\n- watch\n- compile\n- minify:elm\n\n### start\n\n`clean` と `watch` を順番に実行します。\n\n```json\n\"start\": \"npm-run-all -s clean watch\"\n```\n\n生成したファイルは `docs` に出力されます。出力先のディレクトリ名を変更する場合は、以下のコマンド内の `docs` を新しい名前に書き直します。（実際には package.json をエディタで一括変換すれば問題ありません）\n\n### clean\n\n`docs` と `public` ディレクトリを 2 つとも削除します。このコマンドのみ、`build` と共有しています。\n\n```json\n\"clean\": \"rimraf docs public\"\n```\n\n### watch\n\n「watch:」で始まるコマンドを、すべて同時に実行します。それぞれが `src` のファイルを監視し、変更があれば `docs` に出力します。\n\n```json\n\"watch:html\": \"cpx -w src/index.html docs\",\n\"watch:assets\": \"cpx -w \\\"src/assets/**/*\\\" docs/assets\",\n\"watch:js\": \"cpx -w src/main.js docs\",\n\"watch:elm\": \"elm-live src/Main.elm --open --start-page=index.html --dir=docs -- --output=docs/elm.js\",\n\"watch:sass\": \"sass --watch src:docs\",\n\"watch\": \"sass src:docs && npm-run-all -p watch:*\"\n```\n\n開発用のサーバーは `watch:elm` の elm-live が起動しています。\n\n### build\n\n`clean` `compile` `minify:elm` を順番に実行しています。\n\n```json\n\"build\": \"npm-run-all -s clean compile minify:elm\",\n```\n\n生成したファイルは `public` に出力されます。出力先のディレクトリ名を変更する場合は、以下のコマンド内の `public` を新しい名前に書き直します。\n\n### compile\n\n「compile:」で始まるコマンドを、すべて同時に実行します。\n\n```json\n\"compile:html\": \"cpx src/index.html public\",\n\"compile:assets\": \"cpx \\\"src/assets/**/*\\\" public/assets\",\n\"compile:js\": \"cpx src/main.js public\",\n\"compile:elm\": \"elm make src/Main.elm --optimize --output=public/elm.optimized.js\",\n\"compile:sass\": \"sass --style=compressed --no-source-map src:public\"\n\"compile\": \"npm-run-all -p compile:*\"\n```\n\n**注意：** minify まで実行しないと elm.js を出力できない実装になっています。cpx でどうにかしたい。（2019 年 7 月 6 日）\n\n### minify:elm\n\nelm.optimized.js を圧縮し、elm.js として出力します。\n\n```json\n\"minify:elm\": \"google-closure-compiler --js=public/elm.optimized.js --js_output_file=public/elm.js && rimraf public/elm.optimized.js\"\n```\n\n# 付録 2： devDependencies\n\n使用した npm のパッケージについて簡単にコメントします。\n\n### cpx\n\nファイル・フォルダのコピーを、Mac でも Windows でも出来るように。\n`--watch` のオプションがあり、`devDependencies` の記述量を減らすことに繋がった。\n（内部的には chokidar かな？）\ncpx で上手くいかない場合は、ncp で妥協することになる。\n\n### elm\n\nElm のコンパイラ。\n\n### elm-live\n\nbrowser-sync を試したものの、コンパイルエラーを無視してサーバーが起動してしまうため、 elm-live が最適という結論になった。\n\n### elm-test\n\nテスト（script 未実装）\n\n### google-closure-compiler\n\nElm をコンパイルした後の js ファイルを圧縮する。\nelm-minify が deprecated となり、こちらが推奨されていたので使用した。\n\n### <s>node-sass</s>\n\n<s>SASS を扱うために使用。いつか sass（Dart Sass）に変えるかもしれない。</s>\nsass（Dart Sass）に変更しました。（2019 年 7 月 9 日）\n\n### npm-run-all\n\nコマンドの直列実行と並列実行を読みやすく記述できる。\n\n### rimraf\n\nフォルダの削除を、Mac でも Windows でも出来るように。\n","staticData":{}}